#!/bin/bash
set -e

# TODO: This doesn't need the pdk, so we could consider splitting it out into another Dockerfile.
# It does leverage the pre and post scripts though, so we'd want to keep those available.
# Establish source dir for relative includes
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

# Pre-suite (download and extract requested release)
# shellcheck source=../shared/entrypoint-pre disable=SC1091
. "$DIR/../shared/entrypoint-pre"

# Make sure required Anubis env vars are set
# shellcheck source=../shared/entrypoint-anubis-pre disable=SC1091
. "$DIR/../shared/entrypoint-anubis-pre"

# FIXME: Add API key as env var
vt_key=''

# TODO: Check the tarball file size, and if larger than 32 MB, need to request an upload URL
# at https://developers.virustotal.com/v3.0/reference#files-upload-url and use that in place
# of the following.
upload_url='https://www.virustotal.com/api/v3/files'

upload=$(curl --request POST \
  --url $upload_url \
  --header "x-apikey: $vt_key" \
  --form file=@"../$release_slug.tar.gz")

result_id=$(echo $upload | jq --raw-output '.data.id')

# Wait a little bit to allow the analysis to run
sleep 30

# Loop 10 times or until .data.attributes.status is not "queued"
queued=true
num_requests=0
while [[ $num_requests -lt 10 && "$queued" = true ]] ; do
  result=$(curl --request GET \
    --url "https://www.virustotal.com/api/v3/analyses/$result_id" \
    --header "x-apikey: $vt_key")

  result_status=$(echo $result | jq --raw-output '.data.attributes.status')
  if [[ "$result_status" != 'queued' ]] ;
  then
    queued=false
  else
    sleep 15
  fi

  let num_requests=num_requests+1
done

echo $result > anubis_output.json
cat anubis_output.json

# Post results back to given API endpoint
# shellcheck source=../shared/entrypoint-anubis-post disable=SC1091
. "$DIR/../shared/entrypoint-anubis-post"

# shellcheck source=shared/entrypoint-post disable=SC1091
. "$DIR/../shared/entrypoint-post"

exit 0
