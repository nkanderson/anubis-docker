#!/bin/bash
set -e

# Establish source dir for relative includes
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

# Pre-suite (download and extract requested release)
# shellcheck source=../shared/entrypoint-pre disable=SC1091
. "$DIR/../shared/entrypoint-pre"

# Make sure required Anubis env vars are set
# shellcheck source=../shared/entrypoint-anubis-pre disable=SC1091
. "$DIR/../shared/entrypoint-anubis-pre"

# TODO: these hardcoded values will be replaced by output from something like
# eval $(pdk environment --puppet-version=\${\$puppet_version})
export PATH=$PATH:/opt/puppetlabs/pdk/private/ruby/2.5.8/bin:/opt/puppetlabs/pdk/private/ruby/2.5.8/lib/ruby/gems/2.5.0
export GEM_PATH=/opt/puppetlabs/pdk/private/ruby/2.5.8/lib/ruby/gems/2.5.0:/opt/puppetlabs/pdk/share/cache/ruby/2.5.0:/opt/puppetlabs/pdk/private/puppet/ruby/2.5.0

# Run metadata-json-lint and emit output to json document
{
  /opt/puppetlabs/pdk/share/cache/ruby/2.5.0/bin/metadata-json-lint --format json > metadata_output.json
  exit_code=$?
} || {
  true
}

# Ensure file contains valid JSON if there's no output
if [[ ! -s metadata_output.json ]]; then
  echo 'null' > metadata_output.json
fi
ruby -e "require 'json'; puts ({ exit_code: $exit_code, output: JSON.parse(File.read('metadata_output.json')) }).to_json" > anubis_output.json
cat anubis_output.json

# Post results back to given API endpoint
# shellcheck source=../shared/entrypoint-anubis-post disable=SC1091
. "$DIR/../shared/entrypoint-anubis-post"

# shellcheck source=shared/entrypoint-post disable=SC1091
. "$DIR/../shared/entrypoint-post"

exit 0

